package cn.likegirl.java.jvm.mina;

import cn.likegirl.java.io.mina.example.aoyi.utils.ByteDisposeUtil;
import cn.likegirl.java.io.mina.example.aoyi.utils.CRCUtil;
import cn.likegirl.java.io.mina.example.aoyi.utils.DataTransferUtil;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import org.apache.commons.collections4.map.HashedMap;
import org.apache.commons.lang.StringUtils;
import org.junit.Test;

public class AoyiTest {

	@Test
	public void test01() {

		Integer x = Integer.parseInt("0000FF00", 16);
		byte[] data = ByteDisposeUtil.intToBytes(65280);
		System.out.println(x);
		System.out.println(Arrays.toString(data));

		System.out.println(25 & 0x0000FF00);

	}



	@Test
	public void test02() {
		String wd = "7e b9 0e 50 00 09 03 c7 2a 24 02 e2 07 04 0e 0f 24 21 00 ea 78 3b 07 61 ab dd 01 01 04 00 00 e2 07 04 0e 0f 2e 35 00 33 79 3b 07 4e ab dd 01 01 04 00 00 05 00 03 00 0d 00 5f 00 00 00 00 00 0d 00 5f 00 05 00 00 00 0d 00 5f 00 05 00 00 00 c7 2a 24 02 e2 07 04 0e 0f 24 21 00 ea 78 3b 07 61 ab dd 01 01 04 00 00 e2 07 04 0e 0f 2e 35 00 33 79 3b 07 4e ab dd 01 01 04 00 00 05 00 03 00 0d 00 5f 00 00 00 00 00 0d 00 5f 00 05 00 00 00 0d 00 5f 00 05 00 00 00 c7 2a 24 02 e2 07 04 0e 0f 24 21 00 ea 78 3b 07 61 ab dd 01 01 04 00 00 e2 07 04 0e 0f 2e 35 00 33 79 3b 07 4e ab dd 01 01 04 00 00 05 \r\n"
				+ "00 03 00 0d 00 5f 00 00 00 00 00 0d 00 5f 00 05 00 00 00 0d 00 5f 00 05 00 00 00 f4 b1 7e";
		byte[] wdDate = ByteDisposeUtil.hexStringToBytes(wd);
		wdDate = DataTransferUtil.upDataTransfer(wdDate);
		byte mesNum = wdDate[6];
		int total = 0;
		for (int j = 0; j < mesNum; j++) {

            // 获取设备编号
            byte[] devNo = Arrays.copyOfRange(wdDate, 7 + total, 11 + total);
            System.out.println(new String(devNo,0,devNo.length));
            String realDevNo = ByteDisposeUtil.bytesL4ToUInt(devNo, 0) + "";
            String realDevNoStr = "0" + realDevNo;
            System.out.println(realDevNoStr);
            System.out.println(Arrays.toString(devNo));
            System.out.println(Arrays.toString(realDevNoStr.getBytes()));
            System.out.println("------------------------------------");

            
		}
		
	}
	
	@Test
	public void test03() {
//		String gj = "7e 95 53 c8 03 01 18 c7 2a 24 02 e2 07 06 06 15 04 17 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 47 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 06 28 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 09 34 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 47 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 69 73 23 02 e2 07 06 06 15 0b 02 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 5a 1a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 0c 13 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 0f 2b 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 12 0c 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 15 1c 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 18 09 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 69 73 23 02 e2 07 06 06 15 1a 2a 00 d7 6c 3b 07 68 9a dd 01 02 00 00 00 5a 1a 00 00 00 00 00 00 00 00 40 05 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 1b 10 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 1d 39 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 21 0b 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 23 23 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 27 07 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 29 20 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 69 73 23 02 e2 07 06 06 15 2a 17 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 5a 1a 00 00 00 00 00 00 00 00 40 05 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 2c 35 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 2f 15 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 32 33 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 35 06 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 38 27 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 69 73 23 02 e2 07 06 06 15 39 38 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 5a 1a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 3a 37 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c bb 7e";
//		String gj = "7e 95 53 c8 03 01 18 c7 2a 24 02 e2 07 06 06 15 04 17 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 47 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 06 28 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 09 34 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 47 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 69 73 23 02 e2 07 06 06 15 0b 02 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 5a 1a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 0c 13 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 0f 2b 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 12 0c 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 15 1c 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 18 09 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 69 73 23 02 e2 07 06 06 15 1a 2a 00 d7 6c 3b 07 68 9a dd 01 02 00 00 00 5a 1a 00 00 00 00 00 00 00 00 40 05 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 1b 10 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 1d 39 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 21 0b 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 23 23 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 27 07 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 29 20 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 69 73 23 02 e2 07 06 06 15 2a 17 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 5a 1a 00 00 00 00 00 00 00 00 40 05 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 2c 35 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 2f 15 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 32 33 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 35 06 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 38 27 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 69 73 23 02 e2 07 06 06 15 39 38 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 5a 1a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 3a 37 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 5b 63 7e";
		String gj = "7e 95 53 c8 03 01 18 c7 2a 24 02 e2 07 06 06 15 04 17 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 47 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 06 28 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 09 34 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 47 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 69 73 23 02 e2 07 06 06 15 0b 02 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 5a 1a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 0c 13 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 0f 2b 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 12 0c 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 15 1c 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 18 09 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 69 73 23 02 e2 07 06 06 15 1a 2a 00 d7 6c 3b 07 68 9a dd 01 02 00 00 00 5a 1a 00 00 00 00 00 00 00 00 40 05 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 1b 10 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 1d 39 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1d 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 21 0b 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 23 23 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 27 07 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 29 20 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 69 73 23 02 e2 07 06 06 15 2a 17 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 5a 1a 00 00 00 00 00 00 00 00 40 05 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 2c 35 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 2f 15 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 32 33 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 35 06 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 c7 2a 24 02 e2 07 06 06 15 38 27 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 46 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 69 73 23 02 e2 07 06 06 15 39 38 00 d1 97 3b 07 18 b8 dd 01 02 00 00 00 5a 1a 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7d 02 5b 24 02 e2 07 06 06 15 3a 37 00 21 af 37 05 63 73 9c 02 02 00 00 00 5f 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 4c bb 7e";
		byte[] gjData = ByteDisposeUtil.hexStringToBytes(gj);
		gjData = DataTransferUtil.upDataTransfer(gjData);
		byte[] message = Arrays.copyOfRange(gjData, 1, gjData.length - 3);
		// 生成crc校验码
		int crc = CRCUtil.do_crc(message);
		// 打印16进制crc值
		System.out.println(String.format("0x%04x", crc));
		System.out.println((byte) (crc & 0x000000ff));
		System.out.println((byte) (crc >> 8 & 0x0000ff));
		byte[] crcArray2 = {(byte) (crc & 0x000000ff),(byte) (crc >> 8 & 0x0000ff)};
		String crc2 = ByteDisposeUtil.bytesToHexFun3(crcArray2);
		System.out.println(crc2);
		
	}
	
	@Test
	public void test04() {
		String realDevNoStr = String.format("%09d",  318831830);
		System.out.println(realDevNoStr);
	}
	
	@Test
	public void test05() {
		Map<String, Object> map = new HashedMap<>();
		map.put("orderids", "123,4 ,23,");
		 List<Long> orderIds = Optional.ofNullable(map.get("orderids"))
                 .map(String::valueOf)
                 .map(ids -> ids.split(","))
                 .map(Arrays::asList)
                 .orElse(new ArrayList<>())
                 .stream().filter( t -> (StringUtils.isNotEmpty(t) && Pattern.compile("[^0-9]+")
                         .matcher(t).matches())).map(String::trim).map(Long::valueOf).collect(Collectors.toList());
		orderIds.forEach(System.out::println);
		System.out.println(Pattern.matches("^\\d+$","123"));
		
	}

}
